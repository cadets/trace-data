Objavro.codecnullavro.schema¿÷{"type": "record", "doc": "* A record representing either a vertex or an edge. This is the top level record that allows\n     * us to easily mix the vertices and edges defined above on the wire.", "namespace": "com.bbn.tc.schema.avro", "name": "TCCDMDatum", "fields": [{"type": [{"type": "record", "doc": "* A principal is a local user\n     * TODO: extend to include remote principals\n     * TODO: what happens when the user information changes (are we tracking versions?)\n     * TODO: Authentication mechanisms: are TA1s providing that information and how?", "namespace": "com.bbn.tc.schema.avro", "name": "Principal", "fields": [{"type": {"type": "fixed", "size": 16, "name": "UUID", "namespace": "com.bbn.tc.schema.avro"}, "name": "uuid", "doc": "A unique id for the principal"}, {"type": {"type": "enum", "symbols": ["PRINCIPAL_LOCAL", "PRINCIPAL_REMOTE"], "name": "PrincipalType", "namespace": "com.bbn.tc.schema.avro", "doc": "* PrincipalType identifies the type of user: either local to the\n     * host, or remote users/systems."}, "default": "PRINCIPAL_LOCAL", "name": "type", "doc": "The type of the principal, local by default"}, {"type": "string", "name": "userId", "doc": "The operating system identifier associated with the user"}, {"type": ["null", "string"], "default": null, "name": "username", "doc": "Human-readable string identifier, such as username (Optional)"}, {"type": {"type": "array", "items": "string"}, "name": "groupIds", "doc": "The ids of the groups which this user is part of"}, {"type": ["null", {"type": "map", "values": "string"}], "default": null, "name": "properties", "doc": "* Arbitrary key, value pairs describing the entity.\n         * NOTE: This attribute is meant as a temporary place holder for items that\n         * will become first-class attributes in the next CDM version."}]}, {"type": "record", "doc": "* A provenance tag defines source dependence on specific data sources (inputs).\n     * A tag identifier is typically bound to a source and used by the tracking system to\n     * capture dependence on this source input.\n     *\n     * ProvenanceTagNode defines one step of provenance for a value\n     * (i.e., one read from a source or write to a sink), a reference\n     * to the previous provenance of the value (if any), and the tag\n     * operation that resulted the tagId of this ProvenanceTagNode", "namespace": "com.bbn.tc.schema.avro", "name": "ProvenanceTagNode", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "tagId", "doc": "Tag ID for this node *"}, {"type": ["null", "com.bbn.tc.schema.avro.UUID"], "name": "flowObject", "doc": "* The UUID of the source or sink object associated with this\n         * tag. (Optional)\n         *\n         * This attribute is optional because if the\n         * ProvenanceTagNode is simply joining two existing\n         * provenances (e.g., when two values are added together), there\n         * is no flow object associated with that definition.\n         *"}, {"type": "com.bbn.tc.schema.avro.UUID", "name": "subject", "doc": "Subject that is performing the src/sink action *"}, {"type": ["null", "string"], "default": null, "name": "systemCall", "doc": "System call that read/wrote the data *"}, {"type": ["null", "string"], "default": null, "name": "programPoint", "doc": "The program point where the event was triggered (e.g., executable and line number), (Optional)"}, {"type": ["null", "com.bbn.tc.schema.avro.UUID"], "default": null, "name": "prevTagId", "doc": "The previous tag for this value *"}, {"type": ["null", {"type": "enum", "symbols": ["TAG_OP_UNION", "TAG_OP_ENCODE", "TAG_OP_STRONG", "TAG_OP_MEDIUM", "TAG_OP_WEAK"], "name": "TagOpCode", "namespace": "com.bbn.tc.schema.avro", "doc": "* The tag opcode describes the provenance relation i.e., how multiple sources are combined to\n     * produce the output. We identify the following provenance relations"}], "default": null, "name": "opcode", "doc": "Tag operation that resulted in the tagId of this ProvenanceTagNode *"}, {"type": ["null", {"type": "array", "items": "com.bbn.tc.schema.avro.UUID"}], "default": null, "name": "tagIds"}, {"type": ["null", {"type": "enum", "symbols": ["INTEGRITY_UNTRUSTED", "INTEGRITY_BENIGN", "INTEGRITY_INVULNERABLE"], "name": "IntegrityTag", "namespace": "com.bbn.tc.schema.avro", "doc": "* The integrity tag may be used to specify the initial integrity of an entity,\n     * or to endorse its content after performing appropriate checking/sanitization."}], "default": null, "name": "itag", "doc": "The integrity tag may be used to specify the intial\n         *  integrity of an entity, or to endorse it content after\n         *  performing appropriate checking/sanitization."}, {"type": ["null", {"type": "enum", "symbols": ["CONFIDENTIALITY_SECRET", "CONFIDENTIALITY_SENSITIVE", "CONFIDENTIALITY_PRIVATE", "CONFIDENTIALITY_PUBLIC"], "name": "ConfidentialityTag", "namespace": "com.bbn.tc.schema.avro", "doc": "* The confidentiality tag may be used to specify the initial confidentiality of an entity,\n     * or to declassify its content after performing appropriate checking/sanitization."}], "default": null, "name": "ctag", "doc": "* The confidentiality tag may be used to specify the initial\n         * confidentiality of an entity, or to declassify its content\n         * after performing appropriate checking/sanitization."}, {"type": ["null", {"type": "map", "values": "string"}], "default": null, "name": "properties", "doc": "* Arbitrary key, value pairs describing the entity.\n         * NOTE: This attribute is meant as a temporary place holder for items that\n         * will become first-class attributes in the next CDM version."}]}, {"type": "record", "doc": "* Subjects represent execution contexts and include mainly threads and processes. They can be more granular and\n     * can represent other execution boundaries such as units and blocks if needed.", "namespace": "com.bbn.tc.schema.avro", "name": "Subject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "universally unique identifier for the subject"}, {"type": {"type": "enum", "symbols": ["SUBJECT_PROCESS", "SUBJECT_THREAD", "SUBJECT_UNIT", "SUBJECT_BASIC_BLOCK"], "name": "SubjectType", "namespace": "com.bbn.tc.schema.avro", "doc": "* SubjectType enumerates the types of execution contexts supported.\n     *\n     * SUBJECT_PROCESS,    process\n     * SUBJECT_THREAD,     thread within a process\n     * SUBJECT_UNIT        so far we only know of TRACE BEEP using this"}, "name": "type", "doc": "the subject type"}, {"type": "int", "name": "cid", "doc": "Context ID: OS process id for type process, thread id for threads"}, {"type": ["null", "com.bbn.tc.schema.avro.UUID"], "default": null, "name": "parentSubject", "doc": "* parent subject's UUID. For a process, this is a parent\n         * process. For a thread, this is the process that created the\n         * thread. Only optional because in some cases the parent not\n         * be known; null value indicates that the parent is unknown."}, {"type": "com.bbn.tc.schema.avro.UUID", "name": "localPrincipal", "doc": "UUID of local principal that owns this subject"}, {"type": "long", "name": "startTimestampNanos", "doc": "* The start time of the subject\n         * A timestamp stores the number of nanoseconds from the unix epoch, 1 January 1970 00:00:00.000000 UTC."}, {"type": ["null", "int"], "default": null, "name": "unitId", "doc": "unit id for unit based instrumentation (Optional)"}, {"type": ["null", "int"], "default": null, "name": "iteration", "doc": "iteration and count are used for distinguishing individual ?units? of execution (Optional)"}, {"type": ["null", "int"], "default": null, "name": "count"}, {"type": ["null", "string"], "default": null, "name": "cmdLine", "doc": "Process command line arguments including process name (Optional)"}, {"type": ["null", {"type": "enum", "symbols": ["LIMITED", "ELEVATED", "FULL"], "name": "PrivilegeLevel", "namespace": "com.bbn.tc.schema.avro", "doc": "* Windows allows Subjects (processes) to have the following\n     * enumerated privilege levels."}], "default": null, "name": "privilegeLevel", "doc": "Windows allows processes to have different privilege levels (Optional)"}, {"type": ["null", {"type": "array", "items": "string"}], "default": null, "name": "importedLibraries", "doc": "* imported libraries. (Optional). Lists the libraries that\n         * are expected to be loaded, but may not necessarily\n         * correspond 1-to-1 with actual load library events because\n         * some libraries may already be loaded when this event\n         * occurs."}, {"type": ["null", {"type": "array", "items": "string"}], "default": null, "name": "exportedLibraries", "doc": "exported libraries. (Optional)"}, {"type": ["null", {"type": "map", "values": "string"}], "default": null, "name": "properties", "doc": "* Arbitrary key, value pairs describing the entity.\n         * NOTE: This attribute is meant as a temporary place holder for items that\n         * will become first-class attributes in the next CDM version."}]}, {"type": "record", "doc": "* Represents a file on the file system. Instantiates an AbstractObject.", "namespace": "com.bbn.tc.schema.avro", "name": "FileObject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "Universally unique identifier for the object"}, {"type": {"type": "record", "doc": "*  Objects, in general, represent data sources and sinks which\n     *  could include sockets, files, memory, and any data in general\n     *  that can be an input and/or output to an event.  This record\n     *  is intended to be abstract i.e., one should not instantiate an\n     *  Object but rather instantiate one of its sub types (ie,\n     *  encapsulating records) FileObject, UnnamedPipeObject,\n     *  RegistryKeyObject, NetFlowObject, MemoryObject, or\n     *  SrcSinkObject.", "namespace": "com.bbn.tc.schema.avro", "name": "AbstractObject", "fields": [{"type": ["null", {"type": "fixed", "size": 2, "name": "SHORT", "namespace": "com.bbn.tc.schema.avro"}], "default": null, "name": "permission", "doc": "Permission bits defined over the object (Optional)"}, {"type": ["null", "int"], "default": null, "name": "epoch", "doc": "* Used to track when an object is deleted and a new one is\n         * created with the same identifier. This is useful for when\n         * UUIDs are based on something not likely to be unique, such\n         * as file path."}, {"type": ["null", {"type": "map", "values": "string"}], "default": null, "name": "properties", "doc": "* Arbitrary key, value pairs describing the entity.\n         * NOTE: This attribute is meant as a temporary place holder for items that\n         * will become first-class attributes in the next CDM version."}]}, "name": "baseObject", "doc": "The base object attributes"}, {"type": {"type": "enum", "symbols": ["FILE_OBJECT_FILE", "FILE_OBJECT_DIR", "FILE_OBJECT_NAMED_PIPE", "FILE_OBJECT_UNIX_SOCKET", "FILE_OBJECT_PEFILE"], "name": "FileObjectType", "namespace": "com.bbn.tc.schema.avro", "doc": "* These types enumerate the types of FileObjects"}, "name": "type", "doc": "The type of FileObject"}, {"type": ["null", "int"], "default": null, "name": "fileDescriptor", "doc": "The file descriptor (Optional)"}, {"type": ["null", "com.bbn.tc.schema.avro.UUID"], "default": null, "name": "localPrincipal", "doc": "UUID of local principal that owns this file object.  This\n         * attribute is optional because there are times when \n         * the owner of the file may not be known at the time the file\n         * object is reported (e.g., missed open call). Otherwise,\n         * the local principal SHOULD be included."}, {"type": ["null", "long"], "default": null, "name": "size", "doc": "* The file size in bytes (Optional). This attribute reports\n         * the file size at the time the FileObject is created. Since records\n         * are not updated, changes in file size is trackable via the events\n         * that changed the file size."}, {"type": ["null", "string"], "default": null, "name": "peInfo", "doc": "* portable execution (PE) info for windows (Optional).\n         * Note from FiveDirections: We will LIKELY change this type for engagement 3"}, {"type": ["null", {"type": "array", "items": {"type": "record", "doc": "* Cryptographic hash records represent one or more cryptographic hashes for\n     * an object, typically, a FileObject.", "namespace": "com.bbn.tc.schema.avro", "name": "CryptographicHash", "fields": [{"type": {"type": "enum", "symbols": ["MD5", "SHA1", "SHA256", "SHA512", "AUTHENTIHASH", "SSDEEP", "IMPHASH"], "name": "CryptoHashType", "namespace": "com.bbn.tc.schema.avro", "doc": "Cryptographich hash types"}, "name": "type", "doc": "The type of hash used"}, {"type": "string", "name": "hash", "doc": "The base64 encoded hash value"}]}}], "default": null, "name": "hashes", "doc": "(Optional) Zero or more cryptographic hashes over the FileObject"}]}, {"type": "record", "doc": "* Represents an unnamed pipe. Instantiates an AbstractObject.", "namespace": "com.bbn.tc.schema.avro", "name": "UnnamedPipeObject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "Universally unique identifier for the object"}, {"type": "com.bbn.tc.schema.avro.AbstractObject", "name": "baseObject", "doc": "The base object attributes"}, {"type": "int", "name": "sourceFileDescriptor", "doc": "File descriptors for reading and writing."}, {"type": "int", "name": "sinkFileDescriptor"}]}, {"type": "record", "doc": "* Represents a registry key. Instantiates an AbstractObject.", "namespace": "com.bbn.tc.schema.avro", "name": "RegistryKeyObject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "Universally unique identifier for the object"}, {"type": "com.bbn.tc.schema.avro.AbstractObject", "name": "baseObject", "doc": "The base object attributes"}, {"type": "string", "name": "key", "doc": "The registry key/path"}, {"type": ["null", {"type": "record", "doc": "* Values represent transient data, mainly parameters to\n     * events. Values are created and used once within an event's\n     * execution and are relevant mainly during fine-grained tracking\n     * (such as with tag/taint propagation).  Values have tags\n     * describing their provenance. Sometimes the actual value's value\n     * is reported in addition to the value's metadata\n     *\n     * The size of the value is the number of elements of type\n     * valueDataType. This should be -1 for primitive and complex\n     * types.  For arrays, the size is the array length. i.e., if\n     * size >= 0, then this value is an array.  A complex value (such as\n     * an object) can contain other values (primitives or other\n     * complex values) within it, as components.\n     *\n     * Examples: <br>\n     *\n     * an integer will have size=-1 and valueDataType=INT, and\n     * valueBytes.length=4 bytes <br>\n     *\n     * an int[4] will have size=4 and valueDataType=INT, and\n     * valueBytes.length=16 bytes (4*4) <br>\n     *\n     * a string s=\"abc\" has size=3 and valueDataType=CHAR, and\n     * valueBytes.length=12 bytes (UTF32_BE encoding; 4 bytes per\n     * char) <br>\n     *\n     * an MyClass obj has size=-1, valueDataType=COMPLEX,\n     * runtimeDataType=\"MyClass\", valueBytes=<pointer> <br>", "namespace": "com.bbn.tc.schema.avro", "name": "Value", "fields": [{"type": "int", "default": -1, "name": "size", "doc": "The size of the value: the number of elements of type valueDataType; -1 for non-arrays"}, {"type": {"type": "enum", "symbols": ["VALUE_TYPE_SRC", "VALUE_TYPE_SINK", "VALUE_TYPE_CONTROL"], "name": "ValueType", "namespace": "com.bbn.tc.schema.avro", "doc": "* A value type is either source, sink, or control This is for\n     * Event parameters to distinguish source/sink values vs control\n     * parameters (such as a file descriptor)."}, "name": "type", "doc": "The type indicates whether it's a source, sink, or control value"}, {"type": {"type": "enum", "symbols": ["VALUE_DATA_TYPE_BYTE", "VALUE_DATA_TYPE_BOOL", "VALUE_DATA_TYPE_CHAR", "VALUE_DATA_TYPE_SHORT", "VALUE_DATA_TYPE_INT", "VALUE_DATA_TYPE_FLOAT", "VALUE_DATA_TYPE_LONG", "VALUE_DATA_TYPE_DOUBLE", "VALUE_DATA_TYPE_COMPLEX"], "name": "ValueDataType", "namespace": "com.bbn.tc.schema.avro", "doc": "* A value data type is one of the primitive data types. A string is treated as a char array"}, "name": "valueDataType", "doc": "The actual datatype of the value elements, e.g., int, double, byte, etc. (Optional)\n         *  Strings are treated as char[] so type=CHAR\n         *  String[] is a COMPLEX value whose components are the string values (each modeled as a char[])\n         *  Complex composite objects comprising of primitive values use the COMPLEX type"}, {"type": "boolean", "default": false, "name": "isNull", "doc": "Whether this value is null, needed to indicate null objects (default: false)"}, {"type": ["null", "string"], "default": null, "name": "name", "doc": "the name of the Value, string. (Optional)"}, {"type": ["null", "string"], "default": null, "name": "runtimeDataType", "doc": "The runtime data type of the value (Optional); For example, an object of dataType=COMPLEX, can have\n         *  a runtime data type of say \"MyClass\""}, {"type": ["null", "bytes"], "default": null, "name": "valueBytes", "doc": "* The actual bytes of the value in Big Endian format, e.g.,\n         * an int is converted to a 4 byte buffer (Optional)\n         *\n         * Strings are represented as an array of UTF32_BE encoded\n         * characters (i.e., 4 bytes per char)"}, {"type": ["null", {"type": "array", "items": {"type": "record", "doc": "* This record is a single tuple in a run length encoding of tags", "namespace": "com.bbn.tc.schema.avro", "name": "TagRunLengthTuple", "fields": [{"type": "int", "default": 0, "name": "numValueElements"}, {"type": "com.bbn.tc.schema.avro.UUID", "name": "tagId"}]}}], "default": null, "name": "tag", "doc": "* The value's tag expression describing its provenance (Optional)\n         * Since value could be an array, the tag can use run length encoding if needed."}, {"type": ["null", {"type": "array", "items": "com.bbn.tc.schema.avro.Value"}], "default": null, "name": "components", "doc": "A complex value might comprise other component values if needed (Optional)"}]}], "default": null, "name": "value", "doc": "The value of the key"}, {"type": ["null", "long"], "default": null, "name": "size", "doc": "The entry size in bytes (Optional)"}]}, {"type": "record", "doc": "* Represents a network flow object. Instantiates an AbstractObject.", "namespace": "com.bbn.tc.schema.avro", "name": "NetFlowObject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "Universally unique identifier for the object"}, {"type": "com.bbn.tc.schema.avro.AbstractObject", "name": "baseObject", "doc": "The base object attributes"}, {"type": "string", "name": "localAddress", "doc": "The local IP address for this flow"}, {"type": "int", "name": "localPort", "doc": "The local network port for this flow"}, {"type": "string", "name": "remoteAddress", "doc": "The remote IP address for this flow"}, {"type": "int", "name": "remotePort", "doc": "The remote network port for this flow"}, {"type": ["null", "int"], "default": null, "name": "ipProtocol", "doc": "The IP protocol number e.g., TCP=6"}, {"type": ["null", "int"], "default": null, "name": "fileDescriptor", "doc": "The file descriptor (Optional)"}]}, {"type": "record", "doc": "* Represents a page in memory. Instantiates an AbstractObject.\n     * TODO: is memory really an object (with permissions and so on) or is it a transient data?", "namespace": "com.bbn.tc.schema.avro", "name": "MemoryObject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "Universally unique identifier for the object"}, {"type": "com.bbn.tc.schema.avro.AbstractObject", "name": "baseObject", "doc": "The base object attributes"}, {"type": "long", "name": "memoryAddress", "doc": "The memory address"}, {"type": ["null", "long"], "default": null, "name": "pageNumber", "doc": "(Optional) decomposed memory addressed into pageNumber and pageOffset"}, {"type": ["null", "long"], "default": null, "name": "pageOffset"}, {"type": ["null", "long"], "default": null, "name": "size", "doc": "The entry size in bytes (Optional)"}]}, {"type": "record", "doc": "* Represents a generic source or sink on the host device that is can be a file, memory, or netflow.\n     * This is the most basic representation of a source or sink, basically specifying its type only.", "namespace": "com.bbn.tc.schema.avro", "name": "SrcSinkObject", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "Universally unique identifier for the object"}, {"type": "com.bbn.tc.schema.avro.AbstractObject", "name": "baseObject", "doc": "The base object attributes"}, {"type": {"type": "enum", "symbols": ["SOURCE_ACCELEROMETER", "SOURCE_TEMPERATURE", "SOURCE_GYROSCOPE", "SOURCE_MAGNETIC_FIELD", "SOURCE_HEART_RATE", "SOURCE_LIGHT", "SOURCE_PROXIMITY", "SOURCE_PRESSURE", "SOURCE_RELATIVE_HUMIDITY", "SOURCE_LINEAR_ACCELERATION", "SOURCE_MOTION", "SOURCE_STEP_DETECTOR", "SOURCE_STEP_COUNTER", "SOURCE_TILT_DETECTOR", "SOURCE_ROTATION_VECTOR", "SOURCE_GRAVITY", "SOURCE_GEOMAGNETIC_ROTATION_VECTOR", "SOURCE_CAMERA", "SOURCE_GPS", "SOURCE_AUDIO", "SOURCE_SYSTEM_PROPERTY", "SOURCE_ENV_VARIABLE", "SOURCE_ACCESSIBILITY_SERVICE", "SOURCE_ACTIVITY_MANAGEMENT", "SOURCE_ALARM_SERVICE", "SOURCE_ANDROID_TV", "SOURCE_AUDIO_IO", "SOURCE_BACKUP_MANAGER", "SOURCE_BINDER", "SOURCE_BLUETOOTH", "SOURCE_BOOT_EVENT", "SOURCE_BROADCAST_RECEIVER_MANAGEMENT", "SOURCE_CLIPBOARD", "SOURCE_COMPONENT_MANAGEMENT", "SOURCE_CONTENT_PROVIDER", "SOURCE_CONTENT_PROVIDER_MANAGEMENT", "SOURCE_DATABASE", "SOURCE_DEVICE_ADMIN", "SOURCE_DEVICE_SEARCH", "SOURCE_DEVICE_USER", "SOURCE_DISPLAY", "SOURCE_DROPBOX", "SOURCE_EMAIL", "SOURCE_EXPERIMENTAL", "SOURCE_FILE", "SOURCE_FILE_SYSTEM_MANAGEMENT", "SOURCE_FINGERPRINT", "SOURCE_FLASHLIGHT", "SOURCE_HDMI", "SOURCE_IDLE_DOCK_SCREEN", "SOURCE_IMS", "SOURCE_INFRARED", "SOURCE_INSTALLED_PACKAGES", "SOURCE_JSSE_TRUST_MANAGER", "SOURCE_KEYCHAIN", "SOURCE_KEYGUARD", "SOURCE_LOCATION", "SOURCE_MACHINE_LEARNING", "SOURCE_MEDIA_LOCAL_MANAGEMENT", "SOURCE_MEDIA_LOCAL_PLAYBACK", "SOURCE_MEDIA_NETWORK_CONNECTION", "SOURCE_MEDIA_REMOTE_PLAYBACK", "SOURCE_NETWORK_MANAGEMENT", "SOURCE_NFC", "SOURCE_NOTIFICATION", "SOURCE_PAC_PROXY", "SOURCE_PERMISSIONS", "SOURCE_PERSISTANT_DATA", "SOURCE_POWER_MANAGEMENT", "SOURCE_PRINT_SERVICE", "SOURCE_PROCESS_MANAGEMENT", "SOURCE_RPC", "SOURCE_SCREEN_AUDIO_CAPTURE", "SOURCE_SERIAL_PORT", "SOURCE_SERVICE_MANAGEMENT", "SOURCE_SMS_MMS", "SOURCE_SPEECH_INTERACTION", "SOURCE_STATUS_BAR", "SOURCE_SYNC_FRAMEWORK", "SOURCE_TELEPHONY", "SOURCE_TEXT_SERVICES", "SOURCE_THREADING", "SOURCE_TIME_EVENT", "SOURCE_UI", "SOURCE_UI_AUTOMATION", "SOURCE_UI_RPC", "SOURCE_UID_EVENT", "SOURCE_USAGE_STATS", "SOURCE_USB", "SOURCE_USER_ACCOUNTS_MANAGEMENT", "SOURCE_VIBRATOR", "SOURCE_WAKE_LOCK", "SOURCE_WALLPAPER_MANAGER", "SOURCE_WAP", "SOURCE_WEB_BROWSER", "SOURCE_WIDGETS", "SOURCE_SINK_IPC", "SOURCE_SINK_UNKNOWN"], "name": "SrcSinkType", "namespace": "com.bbn.tc.schema.avro", "doc": "* There are many types of sources such as sensors.  The type of a\n     * sensor could be base (close to hardware) or composite.  This is\n     * mostly (only?) applicable to the Android platform.  See\n     * https://source.android.com/devices/sensors/index.html for\n     * details."}, "name": "type", "doc": "The type of the object"}, {"type": ["null", "int"], "default": null, "name": "fileDescriptor", "doc": "The file descriptor (Optional)"}]}, {"type": "record", "doc": "* Events represent actions executed by subjects on data objects\n     * or other subjects.  Events are generally system calls, but\n     * could also include function calls, instruction executions, or\n     * even more abstract notions. Events are the core entity in the\n     * data model and they are the main abstraction for representing\n     * information flow between data objects and subjects.", "namespace": "com.bbn.tc.schema.avro", "name": "Event", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "uuid", "doc": "A universally unique identifier for the event"}, {"type": "long", "default": 0, "name": "sequence", "doc": "A logical sequence number for ordering events relative to each other within a subject's execution context"}, {"type": {"type": "enum", "symbols": ["EVENT_ACCEPT", "EVENT_BIND", "EVENT_BLIND", "EVENT_CHANGE_PRINCIPAL", "EVENT_CHECK_FILE_ATTRIBUTES", "EVENT_CLONE", "EVENT_CLOSE", "EVENT_CONNECT", "EVENT_CREATE_OBJECT", "EVENT_CREATE_THREAD", "EVENT_DUP", "EVENT_EXECUTE", "EVENT_FNCTL", "EVENT_FORK", "EVENT_LINK", "EVENT_LSEEK", "EVENT_MMAP", "EVENT_MODIFY_FILE_ATTRIBUTES", "EVENT_MODIFY_PROCESS", "EVENT_MPROTECT", "EVENT_OPEN", "EVENT_OTHER", "EVENT_READ", "EVENT_RECVFROM", "EVENT_RECVMSG", "EVENT_RENAME", "EVENT_SENDTO", "EVENT_SENDMSG", "EVENT_SHM", "EVENT_SIGNAL", "EVENT_TRUNCATE", "EVENT_UNIT", "EVENT_UNLINK", "EVENT_UPDATE", "EVENT_WAIT", "EVENT_WRITE", "EVENT_EXIT", "EVENT_LOADLIBRARY", "EVENT_BOOT", "EVENT_LOGCLEAR", "EVENT_MOUNT", "EVENT_STARTSERVICE", "EVENT_LOGIN", "EVENT_LOGOUT"], "name": "EventType", "namespace": "com.bbn.tc.schema.avro", "doc": "* EventType enumerates the most common system calls. Since there\n     * are hundreds of possible system calls, enumerating all of them\n     * and managing the list across OS versions is a\n     * challenge. EVENT_OTHER is the catch all for events not enumerated here. Any events\n     * that are expected to be of importance, should be included in this list."}, "name": "type", "doc": "The type of the event"}, {"type": "int", "name": "threadId", "doc": "The thread id to which this event belongs"}, {"type": "com.bbn.tc.schema.avro.UUID", "name": "subject", "doc": "UUID of Subject that generated this event"}, {"type": ["null", "com.bbn.tc.schema.avro.UUID"], "default": null, "name": "predicateObject", "doc": "* UUID of Object/Subject this event acts on. For events that\n         * have two arguments, this attribute contains the first\n         * argument. This attribute is optional because it may not be\n         * relevant for some events."}, {"type": ["null", "string"], "default": null, "name": "predicateObjectPath", "doc": "If applicable, the object's absolute file path (Optional)"}, {"type": ["null", "com.bbn.tc.schema.avro.UUID"], "default": null, "name": "predicateObject2", "doc": "Optional UUID of Object/Subject for events that take two\n         *  arguments (e.g., link, rename, etc). This attribute contains the second argument."}, {"type": ["null", "string"], "default": null, "name": "predicateObject2Path", "doc": "If applicable, the second object's absolute file path (Optional)"}, {"type": "long", "name": "timestampNanos", "doc": "* The time at which the event occurred. Timestamps allow\n         * reasoning about order of events on a host when the same\n         * clock is used. A timestamp stores the number of nanoseconds\n         * from the unix epoch, 1 January 1970 00:00:00.000000 UTC.\n         *\n         * TODO: When different clocks are used on a host or across\n         * hosts, we need to also define a clock source"}, {"type": ["null", "string"], "default": null, "name": "name", "doc": "Event name (Optional)"}, {"type": ["null", {"type": "array", "items": "com.bbn.tc.schema.avro.Value"}], "default": null, "name": "parameters", "doc": "Event parameters represented as values, see Value (Optional)"}, {"type": ["null", "long"], "default": null, "name": "location", "doc": "Location refers to the location of the data affecting the event\n         *  (e.g., the read offset in the file for the read system call event). (Optional)"}, {"type": ["null", "long"], "default": null, "name": "size", "doc": "Size refers to the size of the data affecting the event\n         *  (e.g., the number of bytes read from the file for the read system call event). (Optional)"}, {"type": ["null", "string"], "default": null, "name": "programPoint", "doc": "The program point where the event was triggered (e.g., executable and line number). (Optional)"}, {"type": ["null", {"type": "map", "values": "string"}], "default": null, "name": "properties", "doc": "* Arbitrary key, value pairs describing the entity.\n         * NOTE: This attribute is meant as a temporary place holder for items that\n         * will become first-class attributes in the next CDM version."}]}, {"type": "record", "doc": "* This record captures a relationship edge between two units, one\n     * dependent on the other. This relationship is inferred from a\n     * combination of underlying events.", "namespace": "com.bbn.tc.schema.avro", "name": "UnitDependency", "fields": [{"type": "com.bbn.tc.schema.avro.UUID", "name": "unit"}, {"type": "com.bbn.tc.schema.avro.UUID", "name": "dependentUnit"}]}, {"type": "record", "doc": "* TimeMarker records are used to delineate time periods in a data\n     * stream to help consumers know their current read position in the\n     * data stream.", "namespace": "com.bbn.tc.schema.avro", "name": "TimeMarker", "fields": [{"type": "long", "name": "tsNanos", "doc": "Timestamp in nanoseconds"}]}], "name": "datum"}, {"type": "string", "default": "16", "name": "CDMVersion"}, {"type": {"type": "enum", "symbols": ["SOURCE_ANDROID_JAVA_CLEARSCOPE", "SOURCE_ANDROID_NATIVE_CLEARSCOPE", "SOURCE_FREEBSD_OPENBSM_TRACE", "SOURCE_FREEBSD_DTRACE_CADETS", "SOURCE_FREEBSD_TESLA_CADETS", "SOURCE_FREEBSD_LOOM_CADETS", "SOURCE_FREEBSD_MACIF_CADETS", "SOURCE_LINUX_AUDIT_TRACE", "SOURCE_LINUX_PROC_TRACE", "SOURCE_LINUX_BEEP_TRACE", "SOURCE_LINUX_THEIA", "SOURCE_WINDOWS_DIFT_FAROS", "SOURCE_WINDOWS_PSA_FAROS", "SOURCE_WINDOWS_FIVEDIRECTIONS"], "name": "InstrumentationSource", "namespace": "com.bbn.tc.schema.avro", "doc": "* InstrumentationSource identifies the source reporting provenance information."}, "name": "source", "doc": "What source generated this record?"}]} ÓÅ,ø÷%cÁI~É”se
ò´|£ß`ìQ_ì`kwQRF         16 ï·Ω{ÌPbã7ü Ê»ﬂÏ 0root  16/≈
]˘1Ê†D®Bç∆ ¸≥ ï·Ω{ÌPbã7ü Ê»ﬂÏ         16·»≠l)∫VÊÅs˜FD™ûU @ﬁõ/≈
]˘1Ê†D®Bç∆´|£ß`ìQ_ì`kwQRFp/usr/home/amanda/tc/trace-data/ripe_unit_tests/temporary  ºàô™Á…ÿ•)aue_rmdir    exec remove_directory 16—÷gú›GQyêéÒ@æjHﬁõ/≈
]˘1Ê†D®Bç∆/≈
]˘1Ê†D®Bç∆   ºàô™Á…ÿ•)aue_exit    exec remove_directory 16ÓÅ,ø÷%cÁI~É”se